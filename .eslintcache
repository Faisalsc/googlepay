[{"C:\\createReactApp\\notification\\src\\index.js":"1","C:\\createReactApp\\notification\\src\\App.js":"2","C:\\createReactApp\\notification\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1609218430750,"results":"4","hashOfConfig":"5"},{"size":7470,"mtime":1612190378684,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609218430750,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"bk3m52",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\createReactApp\\notification\\src\\index.js",[],["17","18"],"C:\\createReactApp\\notification\\src\\App.js",["19","20"],"import logo from './logo.svg';\nimport './App.css';\nimport GooglePayButton from \"@google-pay/button-react\";\nimport React from \"react\"\nfunction App() {\n  //   const allowedNetworks = ['VISA','MASTERCARD'];\n  // const allowedAuthMethods = ['PAN_ONLY','CRYPTOGRAM_3DS'];\n  const supportedInstruments = [\n    {\n      supportedMethods: ['https://tez.google.com/pay'],\n      data: {\n        pa: '8678912996@apl',\n        pn: 'Nashat Enterprises',\n        tr: '4444ABCF',  // your custom transaction reference ID\n        url: 'https://www.alameenindia.com',\n        mc: '5111', // your merchant category code\n        tn: 'Purchase in Merchant',\n      },\n    }\n  ];\n  const details = {\n    total: {\n      label: 'Total',\n      amount: {\n        currency: 'INR',\n        value: '10.01', // sample amount\n      },\n    },\n    displayItems: [{\n      label: 'Original Amount',\n      amount: {\n        currency: 'INR',\n        value: '10.01',\n      },\n    }],\n  };\n  let request = null;\n  try {\n    request = new PaymentRequest(supportedInstruments, details);\n  } catch (e) {\n    console.log('Payment Request Error: ' + e.message);\n    return;\n  }\n  if (!request) {\n    console.log('Web payments are not supported in this browser.');\n    return;\n  }\n  // Global key for canMakepayment cache.\n  const canMakePaymentCache = 'canMakePaymentCache';\n\n  /**\n   * Check whether can make payment with Google Pay or not. It will check session storage\n   * cache first and use the cache directly if it exists. Otherwise, it will call\n   * canMakePayment method from PaymentRequest object and return the result, the\n   * result will also be stored in the session storage cache for future usage.\n   *\n   * @private\n   * @param {PaymentRequest} request The payment request object.\n   * @return {Promise} a promise containing the result of whether can make payment.\n   */\n  function checkCanMakePayment(request) {\n    // Check canMakePayment cache, use cache result directly if it exists.\n    if (sessionStorage.hasOwnProperty(canMakePaymentCache)) {\n      return Promise.resolve(JSON.parse(sessionStorage[canMakePaymentCache]));\n    }\n\n    // If canMakePayment() isn't available, default to assume the method is\n    // supported.\n    var canMakePaymentPromise = Promise.resolve(true);\n\n    // Feature detect canMakePayment().\n    if (request.canMakePayment) {\n      canMakePaymentPromise = request.canMakePayment();\n    }\n\n    return canMakePaymentPromise\n      .then((result) => {\n        // Store the result in cache for future usage.\n        sessionStorage[canMakePaymentCache] = result;\n        return result;\n      })\n      .catch((err) => {\n        console.log('Error calling canMakePayment: ' + err);\n      });\n  }\n  function handleNotReadyToPay() {\n    alert('Google Pay is not ready to pay.');\n  }\n  function showPaymentUI(request, canMakePayment) {\n    if (!canMakePayment) {\n      handleNotReadyToPay();\n      return;\n    }\n\n    // Set payment timeout.\n    let paymentTimeout = window.setTimeout(function () {\n      window.clearTimeout(paymentTimeout);\n      request.abort()\n        .then(function () {\n          console.log('Payment timed out after 20 minutes.');\n        })\n        .catch(function () {\n          console.log('Unable to abort, user is in the process of paying.');\n        });\n    }, 20 * 60 * 1000); /* 20 minutes */\n\n    request.show()\n      .then(function (instrument) {\n\n        window.clearTimeout(paymentTimeout);\n        processResponse(instrument); // Handle response from browser.\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n\n  /**\n  * Process the response from browser.\n  *\n  * @private\n  * @param {PaymentResponse} instrument The payment instrument that was authed.\n  */\n function instrumentToJsonString(instrument) {\n  if (instrument.toJSON) {\n    return JSON.stringify(instrument, undefined, 2);\n  } else {\n    return JSON.stringify({\n      methodName: instrument.methodName,\n      details: instrument.details,\n    }, undefined, 2);\n  }\n}\n  function processResponse(instrument) {\n    var instrumentString = instrumentToJsonString(instrument);\n    console.log(instrumentString);\n    // console.log(instrument);\n\n    fetch('/buy', {\n      method: 'POST',\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n      body: instrumentString,\n    })\n      .then(function (buyResult) {\n        if (buyResult.ok) {\n          return buyResult.json();\n        }\n        console.log('Error sending instrument to server.');\n      })\n      .then(function (buyResultJson) {\n        completePayment(instrument, buyResultJson.status, buyResultJson.message);\n\n      })\n      .catch(function (err) {\n        console.log('Unable to process payment. ' + err);\n      });\n  }\n\n  /**\n  * Notify browser that the instrument authorization has completed.\n  *\n  * @private\n  * @param {PaymentResponse} instrument The payment instrument that was authed.\n  * @param {string} result Whether the auth was successful. Should be either\n  * 'success' or 'fail'.\n  * @param {string} msg The message to log in console.\n  */\n  function completePayment(instrument, result, msg) {\n    instrument.complete(result)\n      .then(function () {\n        console.log('Payment succeeds.');\n        console.log(msg);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n\n  var canMakePaymentPromise = checkCanMakePayment(request);\n  canMakePaymentPromise\n    .then((result) => {\n      showPaymentUI(request, result);\n    })\n    .catch((err) => {\n      console.log('Error calling checkCanMakePayment: ' + err);\n    });\n\n  return (\n    <div className=\"App\">\n      <h1>google pay integration</h1>\n\n      {/* <GooglePayButton\n        environment=\"TEST\"\n        paymentRequest={{\n          apiVersion: 2,\n          apiVersionMinor: 0,\n          allowedPaymentMethods: [\n            {\n              type: 'CARD',\n              parameters: {\n                allowedCardNetworks: allowedNetworks,\n                allowedAuthMethods: allowedAuthMethods,\n                // allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                // allowedCardNetworks: ['MASTERCARD', 'VISA'],\n              },\n              tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: {\n                  gateway: 'allpayments',\n                  gatewayMerchantId: 'BCR2DN6TSPJ7XKYY',\n                },\n              },\n            },\n          ],\n          merchantInfo: {\n            merchantId: 'BCR2DN6TSPJ7XKYY',\n            merchantName: 'Nashat Enterprises',\n          },\n          transactionInfo: {\n            totalPriceStatus: 'FINAL',\n            totalPriceLabel: 'Total',\n            totalPrice: '1',\n            currencyCode: 'USD',\n            countryCode: 'US',\n          },\n          shippingAddressRequired: true,\n          callbackIntents: ['SHIPPING_ADDRESS', 'PAYMENT_AUTHORIZATION'],\n        }}\n        onLoadPaymentData={paymentRequest => {\n          console.log('Success', paymentRequest);\n        }}\n        onPaymentAuthorized={paymentData => {\n          console.log('Payment Authorised Success', paymentData)\n          return { transactionState: 'SUCCESS' }\n        }\n        }\n        onPaymentDataChanged={paymentData => {\n          console.log('On Payment Data Changed', paymentData)\n          return {}\n        }\n        }\n        existingPaymentMethodRequired='false'\n        buttonColor='black'\n        buttonType='Buy'\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\createReactApp\\notification\\src\\reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":1,"column":8,"nodeType":"29","messageId":"30","endLine":1,"endColumn":12},{"ruleId":"27","severity":1,"message":"31","line":3,"column":8,"nodeType":"29","messageId":"30","endLine":3,"endColumn":23},{"ruleId":"23","replacedBy":"32"},{"ruleId":"25","replacedBy":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'GooglePayButton' is defined but never used.",["34"],["35"],"no-global-assign","no-unsafe-negation"]