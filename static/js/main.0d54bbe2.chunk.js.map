{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","className","environment","paymentRequest","apiVersion","apiVersionMinor","allowedPaymentMethods","type","parameters","allowedCardNetworks","allowedAuthMethods","tokenizationSpecification","gateway","gatewayMerchantId","merchantInfo","merchantId","merchantName","transactionInfo","totalPriceStatus","totalPriceLabel","totalPrice","currencyCode","countryCode","shippingAddressRequired","callbackIntents","onLoadPaymentData","console","log","onPaymentAuthorized","paymentData","transactionState","onPaymentDataChanged","existingPaymentMethodRequired","buttonColor","buttonType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,YCoEAA,MAhEf,WAGE,OACE,sBAAKC,UAAU,MAAf,UACE,wDACA,cAAC,IAAD,CACEC,YAAY,OACZC,eAAgB,CACdC,WAAY,EACZC,gBAAiB,EACjBC,sBAAuB,CACrB,CACEC,KAAM,OACNC,WAAY,CACVC,oBAdU,CAAC,OAAO,cAelBC,mBAdW,CAAC,WAAW,mBAkBzBC,0BAA2B,CACzBJ,KAAM,kBACNC,WAAY,CACVI,QAAS,cACTC,kBAAmB,uBAK3BC,aAAc,CACZC,WAAY,mBACZC,aAAc,sBAEhBC,gBAAiB,CACfC,iBAAkB,QAClBC,gBAAiB,QACjBC,WAAY,IACZC,aAAc,MACdC,YAAa,MAEfC,yBAAyB,EACzBC,gBAAiB,CAAC,mBAAoB,0BAExCC,kBAAmB,SAAAtB,GACjBuB,QAAQC,IAAI,UAAWxB,IAEzByB,oBAAqB,SAAAC,GAEnB,OADAH,QAAQC,IAAI,6BAA8BE,GACnC,CAAEC,iBAAkB,YAG7BC,qBAAsB,SAAAF,GAEpB,OADAH,QAAQC,IAAI,0BAA2BE,GAChC,IAGTG,8BAA8B,QAC9BC,YAAY,QACZC,WAAW,YClDJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d54bbe2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport GooglePayButton from \"@google-pay/button-react\";\nimport React from \"react\"\nfunction App() {\n  const allowedNetworks = ['VISA','MASTERCARD'];\nconst allowedAuthMethods = ['PAN_ONLY','CRYPTOGRAM_3DS'];\n  return (\n    <div className=\"App\">\n      <h1>google pay integration</h1>\n      <GooglePayButton\n        environment=\"TEST\"\n        paymentRequest={{\n          apiVersion: 2,\n          apiVersionMinor: 0,\n          allowedPaymentMethods: [\n            {\n              type: 'CARD',\n              parameters: {\n                allowedCardNetworks: allowedNetworks,\n                allowedAuthMethods: allowedAuthMethods,\n                // allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                // allowedCardNetworks: ['MASTERCARD', 'VISA'],\n              },\n              tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: {\n                  gateway: 'allpayments',\n                  gatewayMerchantId: 'BCR2DN6TSPJ7XKYY',\n                },\n              },\n            },\n          ],\n          merchantInfo: {\n            merchantId: 'BCR2DN6TSPJ7XKYY',\n            merchantName: 'Nashat Enterprises',\n          },\n          transactionInfo: {\n            totalPriceStatus: 'FINAL',\n            totalPriceLabel: 'Total',\n            totalPrice: '1',\n            currencyCode: 'USD',\n            countryCode: 'US',\n          },\n          shippingAddressRequired: true,\n          callbackIntents: ['SHIPPING_ADDRESS', 'PAYMENT_AUTHORIZATION'],\n        }}\n        onLoadPaymentData={paymentRequest => {\n          console.log('Success', paymentRequest);\n        }}\n        onPaymentAuthorized={paymentData => {\n          console.log('Payment Authorised Success', paymentData)\n          return { transactionState: 'SUCCESS' }\n        }\n        }\n        onPaymentDataChanged={paymentData => {\n          console.log('On Payment Data Changed', paymentData)\n          return {}\n        }\n        }\n        existingPaymentMethodRequired='false'\n        buttonColor='black'\n        buttonType='Buy'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}