{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","request","PaymentRequest","supportedMethods","data","pa","pn","tr","url","mc","tn","total","label","amount","currency","value","displayItems","e","console","log","message","canMakePaymentCache","sessionStorage","hasOwnProperty","Promise","resolve","JSON","parse","canMakePaymentPromise","canMakePayment","then","result","catch","err","checkCanMakePayment","showPaymentUI","className","paymentTimeout","window","setTimeout","clearTimeout","abort","show","instrument","instrumentString","toJSON","stringify","undefined","methodName","details","instrumentToJsonString","fetch","method","headers","Headers","body","buyResult","ok","json","buyResultJson","msg","complete","completePayment","status","processResponse","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,I,YCyPAA,MArPf,WAGE,IA6BIC,EAAU,KACd,IACEA,EAAU,IAAIC,eA/Ba,CAC3B,CACEC,iBAAkB,CAAC,8BACnBC,KAAM,CACJC,GAAI,mBACJC,GAAI,qBACJC,GAAI,gBACJC,IAAK,+BACLC,GAAI,OACJC,GAAI,0BAIM,CACdC,MAAO,CACLC,MAAO,QACPC,OAAQ,CACNC,SAAU,MACVC,MAAO,UAGXC,aAAc,CAAC,CACbJ,MAAO,kBACPC,OAAQ,CACNC,SAAU,MACVC,MAAO,aAOX,MAAOE,GAEP,YADAC,QAAQC,IAAI,0BAA4BF,EAAEG,SAG5C,GAAKnB,EAAL,CAKA,IAAMoB,EAAsB,sBA2I5B,OA/HA,SAA6BpB,GAE3B,GAAIqB,eAAeC,eAAeF,GAChC,OAAOG,QAAQC,QAAQC,KAAKC,MAAML,eAAc,sBAKlD,IAAIM,EAAwBJ,QAAQC,SAAQ,GAO5C,OAJIxB,EAAQ4B,iBACVD,EAAwB3B,EAAQ4B,kBAG3BD,EACJE,MAAK,SAACC,GAGL,OADAT,eAAc,oBAAwBS,EAC/BA,KAERC,OAAM,SAACC,GACNf,QAAQC,IAAI,iCAAmCc,MAgGzBC,CAAoBjC,GAE7C6B,MAAK,SAACC,GACLI,EAAclC,EAAS8B,MAExBC,OAAM,SAACC,GACNf,QAAQC,IAAI,sCAAwCc,MAItD,qBAAKG,UAAU,MAAf,SACE,0DArGJ,SAASD,EAAclC,EAAS4B,GAC9B,GAAKA,EAAL,CAMA,IAAIQ,EAAiBC,OAAOC,YAAW,WACrCD,OAAOE,aAAaH,GACpBpC,EAAQwC,QACLX,MAAK,WACJZ,QAAQC,IAAI,0CAEba,OAAM,WACLd,QAAQC,IAAI,2DAEf,MAEHlB,EAAQyC,OACLZ,MAAK,SAAUa,GAEdL,OAAOE,aAAaH,GAwB1B,SAAyBM,GACvB,IAAIC,EAXP,SAAgCD,GAC/B,OAAIA,EAAWE,OACNnB,KAAKoB,UAAUH,OAAYI,EAAW,GAEtCrB,KAAKoB,UAAU,CACpBE,WAAYL,EAAWK,WACvBC,QAASN,EAAWM,cACnBF,EAAW,GAISG,CAAuBP,GAC9CzB,QAAQC,IAAIyB,GAGZO,MAAM,OAAQ,CACZC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMX,IAELd,MAAK,SAAU0B,GACd,GAAIA,EAAUC,GACZ,OAAOD,EAAUE,OAEnBxC,QAAQC,IAAI,0CAEbW,MAAK,SAAU6B,IAkBpB,SAAyBhB,EAAYZ,EAAQ6B,GAC3CjB,EAAWkB,SAAS9B,GACjBD,MAAK,WACJZ,QAAQC,IAAI,qBACZD,QAAQC,IAAIyC,MAEb5B,OAAM,SAAUC,GACff,QAAQC,IAAIc,MAxBZ6B,CAAgBnB,EAAYgB,EAAcI,OAAQJ,EAAcvC,YAGjEY,OAAM,SAAUC,GACff,QAAQC,IAAI,8BAAgCc,MA5C5C+B,CAAgBrB,MAEjBX,OAAM,SAAUC,GACff,QAAQC,IAAIc,WA3BhBgC,MAAM,mCA1CN/C,QAAQC,IAAI,oDChCD+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e51b9035.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport GooglePayButton from \"@google-pay/button-react\";\nimport React from \"react\"\nfunction App() {\n  //   const allowedNetworks = ['VISA','MASTERCARD'];\n  // const allowedAuthMethods = ['PAN_ONLY','CRYPTOGRAM_3DS'];\n  const supportedInstruments = [\n    {\n      supportedMethods: ['https://tez.google.com/pay'],\n      data: {\n        pa: 'BCR2DN6TSPL65RI3',\n        pn: 'Nashat Enterprises',\n        tr: 'AXI1234567890',  // your custom transaction reference ID\n        url: 'https://www.alameenindia.com',\n        mc: '5111', // your merchant category code\n        tn: 'Purchase in Merchant',\n      },\n    }\n  ];\n  const details = {\n    total: {\n      label: 'Total',\n      amount: {\n        currency: 'INR',\n        value: '10.01', // sample amount\n      },\n    },\n    displayItems: [{\n      label: 'Original Amount',\n      amount: {\n        currency: 'INR',\n        value: '10.01',\n      },\n    }],\n  };\n  let request = null;\n  try {\n    request = new PaymentRequest(supportedInstruments, details);\n  } catch (e) {\n    console.log('Payment Request Error: ' + e.message);\n    return;\n  }\n  if (!request) {\n    console.log('Web payments are not supported in this browser.');\n    return;\n  }\n  // Global key for canMakepayment cache.\n  const canMakePaymentCache = 'canMakePaymentCache';\n\n  /**\n   * Check whether can make payment with Google Pay or not. It will check session storage\n   * cache first and use the cache directly if it exists. Otherwise, it will call\n   * canMakePayment method from PaymentRequest object and return the result, the\n   * result will also be stored in the session storage cache for future usage.\n   *\n   * @private\n   * @param {PaymentRequest} request The payment request object.\n   * @return {Promise} a promise containing the result of whether can make payment.\n   */\n  function checkCanMakePayment(request) {\n    // Check canMakePayment cache, use cache result directly if it exists.\n    if (sessionStorage.hasOwnProperty(canMakePaymentCache)) {\n      return Promise.resolve(JSON.parse(sessionStorage[canMakePaymentCache]));\n    }\n\n    // If canMakePayment() isn't available, default to assume the method is\n    // supported.\n    var canMakePaymentPromise = Promise.resolve(true);\n\n    // Feature detect canMakePayment().\n    if (request.canMakePayment) {\n      canMakePaymentPromise = request.canMakePayment();\n    }\n\n    return canMakePaymentPromise\n      .then((result) => {\n        // Store the result in cache for future usage.\n        sessionStorage[canMakePaymentCache] = result;\n        return result;\n      })\n      .catch((err) => {\n        console.log('Error calling canMakePayment: ' + err);\n      });\n  }\n  function handleNotReadyToPay() {\n    alert('Google Pay is not ready to pay.');\n  }\n  function showPaymentUI(request, canMakePayment) {\n    if (!canMakePayment) {\n      handleNotReadyToPay();\n      return;\n    }\n\n    // Set payment timeout.\n    let paymentTimeout = window.setTimeout(function () {\n      window.clearTimeout(paymentTimeout);\n      request.abort()\n        .then(function () {\n          console.log('Payment timed out after 20 minutes.');\n        })\n        .catch(function () {\n          console.log('Unable to abort, user is in the process of paying.');\n        });\n    }, 20 * 60 * 1000); /* 20 minutes */\n\n    request.show()\n      .then(function (instrument) {\n\n        window.clearTimeout(paymentTimeout);\n        processResponse(instrument); // Handle response from browser.\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n\n  /**\n  * Process the response from browser.\n  *\n  * @private\n  * @param {PaymentResponse} instrument The payment instrument that was authed.\n  */\n function instrumentToJsonString(instrument) {\n  if (instrument.toJSON) {\n    return JSON.stringify(instrument, undefined, 2);\n  } else {\n    return JSON.stringify({\n      methodName: instrument.methodName,\n      details: instrument.details,\n    }, undefined, 2);\n  }\n}\n  function processResponse(instrument) {\n    var instrumentString = instrumentToJsonString(instrument);\n    console.log(instrumentString);\n    // console.log(instrument);\n\n    fetch('/buy', {\n      method: 'POST',\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n      body: instrumentString,\n    })\n      .then(function (buyResult) {\n        if (buyResult.ok) {\n          return buyResult.json();\n        }\n        console.log('Error sending instrument to server.');\n      })\n      .then(function (buyResultJson) {\n        completePayment(instrument, buyResultJson.status, buyResultJson.message);\n\n      })\n      .catch(function (err) {\n        console.log('Unable to process payment. ' + err);\n      });\n  }\n\n  /**\n  * Notify browser that the instrument authorization has completed.\n  *\n  * @private\n  * @param {PaymentResponse} instrument The payment instrument that was authed.\n  * @param {string} result Whether the auth was successful. Should be either\n  * 'success' or 'fail'.\n  * @param {string} msg The message to log in console.\n  */\n  function completePayment(instrument, result, msg) {\n    instrument.complete(result)\n      .then(function () {\n        console.log('Payment succeeds.');\n        console.log(msg);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n\n  var canMakePaymentPromise = checkCanMakePayment(request);\n  canMakePaymentPromise\n    .then((result) => {\n      showPaymentUI(request, result);\n    })\n    .catch((err) => {\n      console.log('Error calling checkCanMakePayment: ' + err);\n    });\n\n  return (\n    <div className=\"App\">\n      <h1>google pay integration</h1>\n\n      {/* <GooglePayButton\n        environment=\"TEST\"\n        paymentRequest={{\n          apiVersion: 2,\n          apiVersionMinor: 0,\n          allowedPaymentMethods: [\n            {\n              type: 'CARD',\n              parameters: {\n                allowedCardNetworks: allowedNetworks,\n                allowedAuthMethods: allowedAuthMethods,\n                // allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                // allowedCardNetworks: ['MASTERCARD', 'VISA'],\n              },\n              tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: {\n                  gateway: 'allpayments',\n                  gatewayMerchantId: 'BCR2DN6TSPJ7XKYY',\n                },\n              },\n            },\n          ],\n          merchantInfo: {\n            merchantId: 'BCR2DN6TSPJ7XKYY',\n            merchantName: 'Nashat Enterprises',\n          },\n          transactionInfo: {\n            totalPriceStatus: 'FINAL',\n            totalPriceLabel: 'Total',\n            totalPrice: '1',\n            currencyCode: 'USD',\n            countryCode: 'US',\n          },\n          shippingAddressRequired: true,\n          callbackIntents: ['SHIPPING_ADDRESS', 'PAYMENT_AUTHORIZATION'],\n        }}\n        onLoadPaymentData={paymentRequest => {\n          console.log('Success', paymentRequest);\n        }}\n        onPaymentAuthorized={paymentData => {\n          console.log('Payment Authorised Success', paymentData)\n          return { transactionState: 'SUCCESS' }\n        }\n        }\n        onPaymentDataChanged={paymentData => {\n          console.log('On Payment Data Changed', paymentData)\n          return {}\n        }\n        }\n        existingPaymentMethodRequired='false'\n        buttonColor='black'\n        buttonType='Buy'\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}